// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.brian.fun.service;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.brian.fun.service.implementation.UsersImpl;
import com.brian.fun.service.implementation.models.CreateRequest;
import com.brian.fun.service.implementation.models.ForgotPasswordRequest;
import com.brian.fun.service.implementation.models.LoginRequest;
import com.brian.fun.service.models.User;
import com.brian.fun.service.models.UserCreatedResponse;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous TodoClient type.
 */
@ServiceClient(builder = TodoClientBuilder.class, isAsync = true)
public final class UsersAsyncClient {
    @Generated
    private final UsersImpl serviceClient;

    /**
     * Initializes an instance of UsersAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    UsersAsyncClient(UsersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The create operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     user (Required): {
     *         id: long (Required)
     *         username: String (Required)
     *         email: String (Required)
     *         password: String (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: long (Required)
     *     username: String (Required)
     *     email: String (Required)
     *     password: String (Required)
     *     token: String (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(request, requestOptions);
    }

    /**
     * The validate operation.
     * 
     * @param token A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> validateWithResponse(String token, RequestOptions requestOptions) {
        return this.serviceClient.validateWithResponseAsync(token, requestOptions);
    }

    /**
     * The login operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     username: String (Required)
     *     password: String (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> loginWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.loginWithResponseAsync(request, requestOptions);
    }

    /**
     * The logout operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> logoutWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.logoutWithResponseAsync(requestOptions);
    }

    /**
     * Sends a reset token to the user's email address.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     email: String (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> forgotPasswordWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.forgotPasswordWithResponseAsync(request, requestOptions);
    }

    /**
     * The resetPassword operation.
     * 
     * @param resetToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetPasswordWithResponse(String resetToken, RequestOptions requestOptions) {
        return this.serviceClient.resetPasswordWithResponseAsync(resetToken, requestOptions);
    }

    /**
     * The create operation.
     * 
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserCreatedResponse> create(User user) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest requestObj = new CreateRequest(user);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createWithResponse(request, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UserCreatedResponse.class));
    }

    /**
     * The validate operation.
     * 
     * @param token A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> validate(String token) {
        // Generated convenience method for validateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return validateWithResponse(token, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The login operation.
     * 
     * @param username A sequence of textual characters.
     * @param password A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> login(String username, String password) {
        // Generated convenience method for loginWithResponse
        RequestOptions requestOptions = new RequestOptions();
        LoginRequest requestObj = new LoginRequest(username, password);
        BinaryData request = BinaryData.fromObject(requestObj);
        return loginWithResponse(request, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The logout operation.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> logout() {
        // Generated convenience method for logoutWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return logoutWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Sends a reset token to the user's email address.
     * 
     * @param email A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> forgotPassword(String email) {
        // Generated convenience method for forgotPasswordWithResponse
        RequestOptions requestOptions = new RequestOptions();
        ForgotPasswordRequest requestObj = new ForgotPasswordRequest(email);
        BinaryData request = BinaryData.fromObject(requestObj);
        return forgotPasswordWithResponse(request, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The resetPassword operation.
     * 
     * @param resetToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetPassword(String resetToken) {
        // Generated convenience method for resetPasswordWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return resetPasswordWithResponse(resetToken, requestOptions).flatMap(FluxUtil::toMono);
    }
}
