// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.brian.fun.service.implementation;

import com.generic.core.annotation.BodyParam;
import com.generic.core.annotation.ExpectedResponses;
import com.generic.core.annotation.Get;
import com.generic.core.annotation.HeaderParam;
import com.generic.core.annotation.Host;
import com.generic.core.annotation.HostParam;
import com.generic.core.annotation.Post;
import com.generic.core.annotation.QueryParam;
import com.generic.core.annotation.ReturnType;
import com.generic.core.annotation.ServiceInterface;
import com.generic.core.annotation.ServiceMethod;
import com.generic.core.annotation.UnexpectedResponseExceptionType;
import com.generic.core.exception.ClientAuthenticationException;
import com.generic.core.exception.HttpResponseException;
import com.generic.core.exception.ResourceModifiedException;
import com.generic.core.exception.ResourceNotFoundException;
import com.generic.core.http.Response;
import com.generic.core.http.RestProxy;
import com.generic.core.models.BinaryData;
import com.generic.core.models.Context;
import com.generic.core.models.RequestOptions;

/**
 * An instance of this class provides access to all the operations defined in Users.
 */
public final class UsersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final UsersService service;

    /**
     * The service client containing this operation class.
     */
    private final TodoClientImpl client;

    /**
     * Initializes an instance of UsersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    UsersImpl(TodoClientImpl client) {
        this.service = RestProxy.create(UsersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TodoClientUsers to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "TodoClientUsers")
    public interface UsersService {
        @Post("/users")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Get("/validate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> validateSync(@HostParam("endpoint") String endpoint, @QueryParam("token") String token,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/login")
        @ExpectedResponses({ 200, 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> loginSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Get("/logout")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> logoutSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/forgot-password")
        @ExpectedResponses({ 200, 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> forgotPasswordSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Get("/reset-password")
        @ExpectedResponses({ 200, 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> resetPasswordSync(@HostParam("endpoint") String endpoint,
            @QueryParam("resetToken") String resetToken, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * The create operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     user (Required): {
     *         id: long (Required)
     *         username: String (Required)
     *         email: String (Required)
     *         password: String (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: long (Required)
     *     username: String (Required)
     *     email: String (Required)
     *     password: String (Required)
     *     token: String (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), accept, request, requestOptions, Context.NONE);
    }

    /**
     * The validate operation.
     * 
     * @param token A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> validateWithResponse(String token, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.validateSync(this.client.getEndpoint(), token, accept, requestOptions, Context.NONE);
    }

    /**
     * The login operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     username: String (Required)
     *     password: String (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> loginWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.loginSync(this.client.getEndpoint(), accept, request, requestOptions, Context.NONE);
    }

    /**
     * The logout operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> logoutWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.logoutSync(this.client.getEndpoint(), accept, requestOptions, Context.NONE);
    }

    /**
     * Sends a reset token to the user's email address.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     email: String (Required)
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> forgotPasswordWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.forgotPasswordSync(this.client.getEndpoint(), accept, request, requestOptions, Context.NONE);
    }

    /**
     * The resetPassword operation.
     * 
     * @param resetToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetPasswordWithResponse(String resetToken, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.resetPasswordSync(this.client.getEndpoint(), resetToken, accept, requestOptions, Context.NONE);
    }
}
