// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.brian.fun.service.implementation;

import com.generic.core.annotation.BodyParam;
import com.generic.core.annotation.Delete;
import com.generic.core.annotation.ExpectedResponses;
import com.generic.core.annotation.Get;
import com.generic.core.annotation.HeaderParam;
import com.generic.core.annotation.Host;
import com.generic.core.annotation.HostParam;
import com.generic.core.annotation.Patch;
import com.generic.core.annotation.PathParam;
import com.generic.core.annotation.Post;
import com.generic.core.annotation.QueryParam;
import com.generic.core.annotation.ReturnType;
import com.generic.core.annotation.ServiceInterface;
import com.generic.core.annotation.ServiceMethod;
import com.generic.core.annotation.UnexpectedResponseExceptionType;
import com.generic.core.exception.ClientAuthenticationException;
import com.generic.core.exception.HttpResponseException;
import com.generic.core.exception.ResourceModifiedException;
import com.generic.core.exception.ResourceNotFoundException;
import com.generic.core.http.Response;
import com.generic.core.http.RestProxy;
import com.generic.core.models.BinaryData;
import com.generic.core.models.Context;
import com.generic.core.models.RequestOptions;

/**
 * An instance of this class provides access to all the operations defined in TodoItems.
 */
public final class TodoItemsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TodoItemsService service;

    /**
     * The service client containing this operation class.
     */
    private final TodoClientImpl client;

    /**
     * Initializes an instance of TodoItemsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TodoItemsImpl(TodoClientImpl client) {
        this.service
            = RestProxy.create(TodoItemsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TodoClientTodoItems to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "TodoClientTodoItems")
    public interface TodoItemsService {
        @Get("/items")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint, @QueryParam("limit") int limit,
            @QueryParam("offset") int offset, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/items")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createJsonSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/items")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createFormSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("multipart/form-data") BinaryData request, RequestOptions requestOptions, Context context);

        @Get("/items/{id}")
        @ExpectedResponses({ 200, 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint, @PathParam("id") long id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/items/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @PathParam("id") long id,
            @HeaderParam("accept") String accept, @BodyParam("application/merge-patch+json") BinaryData request,
            RequestOptions requestOptions, Context context);

        @Delete("/items/{id}")
        @ExpectedResponses({ 204, 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @PathParam("id") long id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * The list operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     items (Required): [
     *          (Required){
     *             id: long (Required)
     *             title: String (Required)
     *             createdBy: long (Required)
     *             assignedTo: Long (Optional)
     *             description: String (Optional)
     *             status: String(NotStarted/InProgress/Completed) (Required)
     *             createdAt: OffsetDateTime (Required)
     *             updatedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Required)
     *             labels (Required): [
     *                 BinaryData (Required)
     *             ]
     *         }
     *     ]
     *     pagination (Required): {
     *         pageSize: int (Required)
     *         totalSize: int (Required)
     *         prevLink: String (Optional)
     *         nextLink: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param limit The limit to the number of items.
     * @param offset The offset to start paginating at.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(int limit, int offset, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), limit, offset, accept, requestOptions, Context.NONE);
    }

    /**
     * The createJson operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     item (Required): {
     *         id: long (Required)
     *         title: String (Required)
     *         createdBy: long (Required)
     *         assignedTo: Long (Optional)
     *         description: String (Optional)
     *         status: String(NotStarted/InProgress/Completed) (Required)
     *         createdAt: OffsetDateTime (Required)
     *         updatedAt: OffsetDateTime (Required)
     *         completedAt: OffsetDateTime (Required)
     *         labels (Required): [
     *             BinaryData (Required)
     *         ]
     *     }
     *     attachments (Required): [
     *         BinaryData (Required)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: long (Required)
     *     title: String (Required)
     *     createdBy: long (Required)
     *     assignedTo: Long (Optional)
     *     description: String (Optional)
     *     status: String(NotStarted/InProgress/Completed) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     completedAt: OffsetDateTime (Required)
     *     labels (Required): [
     *         BinaryData (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createJsonWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createJsonSync(this.client.getEndpoint(), contentType, accept, request, requestOptions,
            Context.NONE);
    }

    /**
     * The createForm operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: long (Required)
     *     title: String (Required)
     *     createdBy: long (Required)
     *     assignedTo: Long (Optional)
     *     description: String (Optional)
     *     status: String(NotStarted/InProgress/Completed) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     completedAt: OffsetDateTime (Required)
     *     labels (Required): [
     *         BinaryData (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFormWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createFormSync(this.client.getEndpoint(), contentType, accept, request, requestOptions,
            Context.NONE);
    }

    /**
     * The get operation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: long (Required)
     *     title: String (Required)
     *     createdBy: long (Required)
     *     assignedTo: Long (Optional)
     *     description: String (Optional)
     *     status: String(NotStarted/InProgress/Completed) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     completedAt: OffsetDateTime (Required)
     *     labels (Required): [
     *         BinaryData (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param id An integer that can be serialized to JSON (`−9007199254740991 (−(2^53 − 1))` to `9007199254740991 (2^53
     * − 1)` ).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(long id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), id, accept, requestOptions, Context.NONE);
    }

    /**
     * The update operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     patch (Required): {
     *         title: String (Optional)
     *         assignedTo: Long (Optional)
     *         description: String (Optional)
     *         status: String(NotStarted/InProgress/Completed) (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: long (Required)
     *     title: String (Required)
     *     createdBy: long (Required)
     *     assignedTo: Long (Optional)
     *     description: String (Optional)
     *     status: String(NotStarted/InProgress/Completed) (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     completedAt: OffsetDateTime (Required)
     *     labels (Required): [
     *         BinaryData (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param id An integer that can be serialized to JSON (`−9007199254740991 (−(2^53 − 1))` to `9007199254740991 (2^53
     * − 1)` ).
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWithResponse(long id, BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), contentType, id, accept, request, requestOptions,
            Context.NONE);
    }

    /**
     * The delete operation.
     * 
     * @param id An integer that can be serialized to JSON (`−9007199254740991 (−(2^53 − 1))` to `9007199254740991 (2^53
     * − 1)` ).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(long id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), id, accept, requestOptions, Context.NONE);
    }
}
