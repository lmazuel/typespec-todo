// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.ClientModel.Primitives.Pipeline;
using System.Threading;

namespace Todo
{
    // Data plane generated client.
    /// <summary> The Todo service client. </summary>
    public partial class TodoClient
    {
        private const string AuthorizationHeader = "session-id";
        private readonly KeyCredential _keyCredential;
        private readonly MessagePipeline _pipeline;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TodoClient for mocking. </summary>
        protected TodoClient()
        {
        }

        /// <summary> Initializes a new instance of TodoClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public TodoClient(KeyCredential credential) : this(credential, new TodoClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TodoClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public TodoClient(KeyCredential credential, TodoClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new TodoClientOptions();

            ClientDiagnostics = new TelemetrySource(options, true);
            _keyCredential = credential;
            _pipeline = MessagePipeline.Create(options, new IPipelinePolicy<PipelineMessage>[] { new KeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, Array.Empty<IPipelinePolicy<PipelineMessage>>());
        }

        private Users _cachedUsers;
        private TodoItems _cachedTodoItems;

        /// <summary> Initializes a new instance of Users. </summary>
        public virtual Users GetUsersClient()
        {
            return Volatile.Read(ref _cachedUsers) ?? Interlocked.CompareExchange(ref _cachedUsers, new Users(ClientDiagnostics, _pipeline, _keyCredential), null) ?? _cachedUsers;
        }

        /// <summary> Initializes a new instance of TodoItems. </summary>
        public virtual TodoItems GetItemsClient()
        {
            return Volatile.Read(ref _cachedTodoItems) ?? Interlocked.CompareExchange(ref _cachedTodoItems, new TodoItems(ClientDiagnostics, _pipeline, _keyCredential), null) ?? _cachedTodoItems;
        }
    }
}
