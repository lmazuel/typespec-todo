// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Internal;
using System.ClientModel.Primitives;
using System.ClientModel.Primitives.Pipeline;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Todo.Models;

namespace Todo
{
    // Data plane generated sub-client.
    /// <summary> The TodoItemsAttachments sub-client. </summary>
    public partial class TodoItemsAttachments
    {
        private const string AuthorizationHeader = "session-id";
        private readonly KeyCredential _keyCredential;
        private readonly MessagePipeline _pipeline;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TodoItemsAttachments for mocking. </summary>
        protected TodoItemsAttachments()
        {
        }

        /// <summary> Initializes a new instance of TodoItemsAttachments. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        internal TodoItemsAttachments(TelemetrySource clientDiagnostics, MessagePipeline pipeline, KeyCredential keyCredential)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
        }

        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Result<IReadOnlyList<BinaryData>>> GetAttachmentsAsync(long itemId, CancellationToken cancellationToken = default)
        {
            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetAttachmentsAsync(itemId, context).ConfigureAwait(false);
            IReadOnlyList<BinaryData> value = default;
            using var document = await JsonDocument.ParseAsync(result.GetRawResponse().ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<BinaryData> array = new List<BinaryData>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    array.Add(null);
                }
                else
                {
                    array.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            value = array;
            return Result.FromValue(value, result.GetRawResponse());
        }

        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Result<IReadOnlyList<BinaryData>> GetAttachments(long itemId, CancellationToken cancellationToken = default)
        {
            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetAttachments(itemId, context);
            IReadOnlyList<BinaryData> value = default;
            using var document = JsonDocument.Parse(result.GetRawResponse().ContentStream);
            List<BinaryData> array = new List<BinaryData>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    array.Add(null);
                }
                else
                {
                    array.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            value = array;
            return Result.FromValue(value, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAttachmentsAsync(long,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetAttachmentsAsync(long itemId, RequestOptions context)
        {
            using var scope = ClientDiagnostics.CreateSpan("TodoItemsAttachments.GetAttachments");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetAttachmentsRequest(itemId, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAttachments(long,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetAttachments(long itemId, RequestOptions context)
        {
            using var scope = ClientDiagnostics.CreateSpan("TodoItemsAttachments.GetAttachments");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetAttachmentsRequest(itemId, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="contents"></param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contents"/> is null. </exception>
        public virtual async Task<Result> CreateUrlAttachmentAsync(long itemId, BinaryData contents, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(contents, nameof(contents));

            RequestOptions context = FromCancellationToken(cancellationToken);
            CreateUrlAttachmentRequest createUrlAttachmentRequest = new CreateUrlAttachmentRequest(contents);
            Result result = await CreateUrlAttachmentAsync(itemId, createUrlAttachmentRequest.ToRequestBody(), context).ConfigureAwait(false);
            return result;
        }

        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="contents"></param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contents"/> is null. </exception>
        public virtual Result CreateUrlAttachment(long itemId, BinaryData contents, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(contents, nameof(contents));

            RequestOptions context = FromCancellationToken(cancellationToken);
            CreateUrlAttachmentRequest createUrlAttachmentRequest = new CreateUrlAttachmentRequest(contents);
            Result result = CreateUrlAttachment(itemId, createUrlAttachmentRequest.ToRequestBody(), context);
            return result;
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateUrlAttachmentAsync(long,BinaryData,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> CreateUrlAttachmentAsync(long itemId, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("TodoItemsAttachments.CreateUrlAttachment");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateUrlAttachmentRequest(itemId, content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateUrlAttachment(long,BinaryData,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result CreateUrlAttachment(long itemId, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("TodoItemsAttachments.CreateUrlAttachment");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateUrlAttachmentRequest(itemId, content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> DeleteAsync(long itemId, RequestOptions context = null)
        {
            using var scope = ClientDiagnostics.CreateSpan("TodoItemsAttachments.Delete");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteRequest(itemId, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="itemId"> The <see cref="long"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result Delete(long itemId, RequestOptions context = null)
        {
            using var scope = ClientDiagnostics.CreateSpan("TodoItemsAttachments.Delete");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteRequest(itemId, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal PipelineMessage CreateGetAttachmentsRequest(long itemId, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200404);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId.ToString(), true);
            uri.AppendPath("/attachments", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateCreateUrlAttachmentRequest(long itemId, RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier204404);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId.ToString(), true);
            uri.AppendPath("/attachments", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("content-type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateDeleteRequest(long itemId, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200404);
            var request = message.Request;
            request.SetMethod("DELETE");
            var uri = new RequestUri();
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId.ToString(), true);
            uri.AppendPath("/attachments", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        private static RequestOptions DefaultRequestContext = new RequestOptions();
        internal static RequestOptions FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestOptions() { CancellationToken = cancellationToken };
        }

        private static ResponseErrorClassifier _responseErrorClassifier200404;
        private static ResponseErrorClassifier ResponseErrorClassifier200404 => _responseErrorClassifier200404 ??= new StatusResponseClassifier(stackalloc ushort[] { 200, 404 });
        private static ResponseErrorClassifier _responseErrorClassifier204404;
        private static ResponseErrorClassifier ResponseErrorClassifier204404 => _responseErrorClassifier204404 ??= new StatusResponseClassifier(stackalloc ushort[] { 204, 404 });
    }
}
