// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Todo;

namespace Todo.Models
{
    /// <summary> The User. </summary>
    public partial class User
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="User"/>. </summary>
        /// <param name="username"> The user's username. </param>
        /// <param name="email"> The user's email address. </param>
        /// <param name="password">
        /// The user's password, provided when creating a user
        /// but is otherwise not visible (and hashed by the backend)
        /// </param>
        /// <param name="validated"> Whether the user is validated. Never visible to the API. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/>, <paramref name="email"/> or <paramref name="password"/> is null. </exception>
        public User(string username, string email, string password, bool validated)
        {
            Argument.AssertNotNull(username, nameof(username));
            Argument.AssertNotNull(email, nameof(email));
            Argument.AssertNotNull(password, nameof(password));

            Username = username;
            Email = email;
            Password = password;
            Validated = validated;
        }

        /// <summary> Initializes a new instance of <see cref="User"/>. </summary>
        /// <param name="id"> An autogenerated unique id for the user. </param>
        /// <param name="username"> The user's username. </param>
        /// <param name="email"> The user's email address. </param>
        /// <param name="password">
        /// The user's password, provided when creating a user
        /// but is otherwise not visible (and hashed by the backend)
        /// </param>
        /// <param name="validated"> Whether the user is validated. Never visible to the API. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal User(long id, string username, string email, string password, bool validated, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Username = username;
            Email = email;
            Password = password;
            Validated = validated;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="User"/> for deserialization. </summary>
        internal User()
        {
        }

        /// <summary> An autogenerated unique id for the user. </summary>
        public long Id { get; }
        /// <summary> The user's username. </summary>
        public string Username { get; }
        /// <summary> The user's email address. </summary>
        public string Email { get; }
        /// <summary>
        /// The user's password, provided when creating a user
        /// but is otherwise not visible (and hashed by the backend)
        /// </summary>
        public string Password { get; }
        /// <summary> Whether the user is validated. Never visible to the API. </summary>
        public bool Validated { get; }
    }
}
